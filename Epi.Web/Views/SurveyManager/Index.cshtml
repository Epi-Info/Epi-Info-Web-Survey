@model Epi.Web.MVC.Models.PublishModel
@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_LayoutPage2.cshtml";
}
<script src="@Url.Content("~/Scripts/c3.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/d3-5.8.2.min.js")" type="text/javascript"></script>
<link href="@Url.Content("~/Content/css/c3.min.css")" rel="Stylesheet" type="text/css" />
<script src="https://unpkg.com/xlsx/dist/xlsx.full.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/json2csv"></script>

@*<script src="@Url.Content("~/Scripts/jloading-overlay.js")" type="text/javascript"></script>
<link href="@Url.Content("~/Content/css/jloading-overlay.css")" rel="Stylesheet" type="text/css" />*@
@*<script src="@Url.Content("~/Scripts/jquery-1.9.1.js")" type="text/javascript"></script>*@
 
<style>
    .spinner {
        height: 60px;
        width: 60px;
        margin: auto;
        display: flex;
        position: absolute;
        -webkit-animation: rotation .6s infinite linear;
        -moz-animation: rotation .6s infinite linear;
        -o-animation: rotation .6s infinite linear;
        animation: rotation .6s infinite linear;
        border-left: 6px solid rgba(0, 174, 239, .15);
        border-right: 6px solid rgba(0, 174, 239, .15);
        border-bottom: 6px solid rgba(0, 174, 239, .15);
        border-top: 6px solid rgba(0, 174, 239, .8);
        border-radius: 100%;
    }

    @@-webkit-keyframes rotation {
        from {
            -webkit-transform: rotate(0deg);
        }

        to {
            -webkit-transform: rotate(359deg);
        }
    }

    @@-moz-keyframes rotation {
        from {
            -moz-transform: rotate(0deg);
        }

        to {
            -moz-transform: rotate(359deg);
        }
    }

    @@-o-keyframes rotation {
        from {
            -o-transform: rotate(0deg);
        }

        to {
            -o-transform: rotate(359deg);
        }
    }

    @@keyframes rotation {
        from {
            transform: rotate(0deg);
        }

        to {
            transform: rotate(359deg);
        }
    }


    #overlay {
        position: absolute;
        display: none;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(0, 0, 0, 0.5);
        z-index: 2;
        cursor: pointer;
    }

    table {
        font-family: arial, sans-serif;
        border-collapse: collapse;
        width: 100%;
    }

    td, th {
        border: 1px solid #dddddd;
        text-align: left;
        padding: 8px;
    }

    tr:nth-child(even) {
        background-color: #daedf4;
    }

    .ViewTable tr:hover {
        background-color: #ffff99;
    }

    .ViewTable tr:focus {
        background-color: #ffff99;
    }

    .TermsSpan {
        cursor: pointer;
        color: blue;
        text-decoration: underline;
    }
    /*.TermsSpan:hover {
             text-decoration:none;
             text-shadow: 1px 1px 1px #555;
        }*/
    .pageheader {
        font: 24px Segoe UI;
        color: #286655;
    }

    .h2header {
        font: 18px Segoe UI;
        color: #286655;
        font-weight: 400;
        margin: 15px 0 0 0 !important;
    }

    .accountdiv {
        float: none;
        align-self: center;
        min-width: 200px;
        background: #ffffff;
        border: 1px solid #bfbfbf;
        border-radius: 3px;
        padding: 25px 10px 25px 25px;
    }

    .accountdiv2 {
        float: none;
        /*width: 700px;*/
        background: #EBEFF5;
        border: 1px solid #bfbfbf;
        border-radius: 15px;
        padding: 10px 10px 10px 20px;
    }

    .introdiv {
        float: left;
        width: 355px;
        padding: 0 10px 0 0;
    }



    .termsofuse {
        width: 790px;
        padding: 5px;
        height: 300px;
        border: 2px solid #bfbfbf;
        overflow: auto;
    }




    [disabled] {
        color: #737882;
        background-color: #dfdfce;
        box-shadow: 0 2px 6px rgba(0,0,0,0.1), inset 0 1px rgba(255,255,255,0.3), inset 0 10px rgba(255,255,255,0.2), inset 0 10px 20px rgba(255,255,255,0.25), inset 0 -15px 30px rgba(0,0,0,0.3);
        -o-box-shadow: 0 2px 6px rgba(0,0,0,0.1), inset 0 1px rgba(255,255,255,0.3), inset 0 10px rgba(255,255,255,0.2), inset 0 10px 20px rgba(255,255,255,0.25), inset 0 -15px 30px rgba(0,0,0,0.3);
        -webkit-box-shadow: 0 2px 6px rgba(0,0,0,0.1), inset 0 1px rgba(255,255,255,0.3), inset 0 10px rgba(255,255,255,0.2), inset 0 10px 20px rgba(255,255,255,0.25), inset 0 -15px 30px rgba(0,0,0,0.3);
        -moz-box-shadow: 0 2px 6px rgba(0,0,0,0.1), inset 0 1px rgba(255,255,255,0.3), inset 0 10px rgba(255,255,255,0.2), inset 0 10px 20px rgba(255,255,255,0.25), inset 0 -15px 30px rgba(0,0,0,0.3);
    }

        [disabled]:hover {
            background-color: #dfdfce;
        }

    /*div.upload input {
            display: block !important;
            width: 157px !important;
            height: 57px !important;
            opacity: 0 !important;
            overflow: hidden !important;
        }
         input[type="file"] {
            display: none;
        }*/
    .custom-file-upload {
        border: 1px solid #ccc;
        display: inline-block;
        padding: 6px 12px;
        cursor: pointer;
    }



    .field-validation-error {
        color: #bd0000;
        font-size: 14px;
    }

    .field-validation-valid {
        display: none;
    }

    .input-validation-error {
        border: 1px solid #bd0000;
        background-color: #fff2f2;
    }

    .validation-summary-errors {
        font-weight: bold;
        color: #ff0000;
    }

    .validation-summary-valid {
        display: none;
    }

    /*#container {
            width: 100% !important;
            margin-top: 0px !important;
            border: 0px solid red;
        }*/

    #footer {
        /*position: initial;*/
        position: fixed;
        width: 100%;
        bottom: 0;
        height: 6%;
    }
    /*footer {
       position:absolute;
       bottom:0;
       width:100%;
       height:100px;
    }*/
    /*html,body{
        height: 100%
    }*/

    .closebtn {
        margin-left: 15px;
        color: white;
        font-weight: bold;
        float: right;
        font-size: 22px;
        line-height: 20px;
        cursor: pointer;
        transition: 0.3s;
    }

        .closebtn:hover {
            color: black;
        }
</style>
<script type="text/javascript">

     window.SurveyDataSet = "";
    window.ColumnLength = 0;
    window.SelectedRowId = "";


    $(document).ready(function () {

        //LoadResponsesSurveyKey
        //LoadResponseUserPublishKey
        //DownLoadTemplate
        $('#LoadResponsesSurveyKey').change(function ()
        {

            if ($("#LoadResponseUserPublishKey").val() != "" && $("#LoadResponsesSurveyKey").val()!= "") {

                $("#DownLoadTemplate").removeAttr('disabled');

            } else {

                 $("#DownLoadTemplate").prop("disabled",true);
            }
        });
        $("#LoadResponseUserPublishKey").change(function ()
        {

            if ($("#LoadResponsesSurveyKey").val()!= "" && $("#LoadResponseUserPublishKey").val() != "")
            {
                  $("#DownLoadTemplate").removeAttr('disabled');

            }else {

                 $("#DownLoadTemplate").prop("disabled",true);
            }
        });

         $('#ReportList').hide();// to hide report list div
         $("div.Report-alert").hide(); // to hide report alert

          $(".SearchInput").on("keyup", function() {
            var value = $(this).val().toLowerCase();
            $(".ViewTable .TableRow").filter(function() {
              $(this).toggle($(this).text().toLowerCase().indexOf(value) > -1)
            });
          });
        $(".ValueSetSearchInput").on("keyup", function () {
           // alert("ValueSetSearchInput")
            var value = $(this).val().toLowerCase();
            $(".ViewTable1 .TableRow1").filter(function() {
              $(this).toggle($(this).text().toLowerCase().indexOf(value) > -1)
            });
          });
         $("div.alert-success").hide();
         $("#EditValueSetDialogBox").dialog({
            autoOpen: false,
            show: "blind",
            hide: "blind",
            resizable: false,
           height:600,
            width: 'auto' ,
            modal: true

        });
          $("#ViewValueSetDialogBox").dialog({
            autoOpen: false,
            show: "blind",
            hide: "blind",
            resizable: false,
            height: 600,
            width:'auto'



        });
        $('.btn').on('click', function () {
            var $this = $(this);
            $this.button('loading');
            setTimeout(function () {
                $this.button('reset');
            }, 8000);
        });

        $("#TermsDialog").dialog({
            autoOpen: false,
            show: "blind",
            hide: "blind",
            resizable: false,
            height: 600,
            width: 500,

            modal: true
        });
        $(".DataSets").change(function ()
        {



            var str = "";
            $(".DataSets option:selected").each(function () {
                str += $(this).val() + " ";
            });

            GetDataSets(str);




        });
       $(".Report").change(function ()
        {



            var str = "";
            $(".Report option:selected").each(function () {
                str += $(this).val() + " ";
            });

            GetSurveyReports(str);




        });

        if ($('#DashboardDivState').val() == "True") {
            Toggle('DashboardDivExpand');
        }
        if ($('#PublishDivState').val() == "True") {
            Toggle('PublishDivExpand');
        }
        if ($('#RePublishDivState').val() == "True") {
            Toggle('RePublishDivExpand');
        }
        if ($('#DownLoadDivState').val() == "True") {
            Toggle('DownloadDivExpand');
        }

        if ($('#SendEmaiDivState').val() == "True") {
            Toggle('SendEmailDivExpand');
        }
        if ($('#LoadResponsesDivState').val() == "True") {
            Toggle('LoadResponsesDivExpand');
        }
        if ($('#SetJsonDivState').val() == "True") {
            Toggle('SetJsonDivExpand');
        }
        if ($('#ViewRecordsDivState').val() == "True") {
            Toggle('ViewRecordsDivExpand');
        }
         if ($('#UpdateDataSetDivState').val() == "True") {
             Toggle('UpdateDataSetDivExpand');
            // var Id = $('#ValueSetSurveyKey').val();
           //  GetDataSets(Id);
             $("div.alert").hide();
             $("div.alert-success").show();
        }
        // if ($('#ValueSetsDivState').val() == "True") {
        //    Toggle('UpdateDataSetDivExpand');
        //}
        $('#SurveyIdDiv').hide();
       //$('#PublishDiv').hide();
       //$('#DownLoadDiv').hide();
       //$('#RequiredLable').hide();
        //   alert($('#ExistingSurvey_Hidden').val());
        if ($('#ExistingSurvey_Hidden').val() == 'True')
        {

            $('#ExistingSurvey').attr('checked', 'checked');
            $('#SurveyIdDiv').show();

        }

        //('#Path').val('');
        //('#Newfile').val('');

         $("#ValueSetFilePath").change(function () {
            EnableUpdateButton()
        });
          $("#ValueSetUserPublishKey").change(function () {
            EnableUpdateButton()
          });


    });


    function EnablePublishButton(obj) {
        // alert();
        //Term of use
        // $('#PublishSurvey').prop("disabled", true);
        //$('#TermOfUse').hide();

        //$("#TermOfUseLable").click(function () {
        //    if ($('#TermOfUse').is(":visible")) {
        //        $('#TermOfUse').hide();
        //    } else {

        //        $('#TermOfUse').show();
        //    }
        //});


        if (obj.checked) {
            $('#PublishSurvey').prop("disabled", false);
        } else {
            $('#PublishSurvey').prop("disabled", true);
        }

    }
    function clear() {
       
                document.getElementById('valerr').innerHTML = '';
            }

            function OpenFile()
            {
            $('a[href$=".xlsx"]').prop('target', '_blank');

        }
        function OpenFile_txt() {

            $("#TermsDialog").css("visibility", "visible");
            $("#TermsDialog").dialog("open");
            $("span.ui-dialog-title").text('Terms of service and conditions of use');
        }
        function HidUnhidSurveyId(value) {


            if ($('#ExistingSurvey').is(':checked')) {
                $('#SurveyIdDiv').show();
            } else {
                $('#SurveyIdDiv').hide();

            }
        }



    function ChangeText(oFileInput, sTargetID) {
       // alert(12);

           // document.getElementById(sTargetID).value = oFileInput.value;
            $('.' + sTargetID).val(oFileInput.value);
        }
        function OpenSurvey(SurveyURL) {

            window.open(SurveyURL);
        }
        function copyToClipboard() {

            var copyTextarea = document.getElementById('FormInfo');
            copyTextarea.select();
            try {
                var successful = document.execCommand('copy');
                var msg = successful ? 'successful' : 'unsuccessful';
                console.log('Copying text command was ' + msg);
            } catch (err) {
                console.log('Oops, unable to copy');
               alert("Your browser doesn't support copying towards the clipboard. Copy the text manually.")
            }
        }
    function copyToClipboard1(link) {



            var el = document.createElement('textarea');
               // Set value (string to be copied)
               el.value = link;
               // Set non-editable to avoid focus and move outside of view
               el.setAttribute('readonly', '');
               el.style = {position: 'absolute', left: '-9999px'};
               document.body.appendChild(el);
               // Select text inside element
               el.select();
               // Copy text to clipboard
               document.execCommand('copy');
               // Remove temporary element
               document.body.removeChild(el);
        }
        function csvToJSON(csv){

            var lines=csv.split("\n");

            var result = [];

            var headers=lines[0].split(",");

            for(var i=1;i<lines.length-1;i++){

	            var obj = {};
	            var currentline=lines[i].split(",");

	            for(var j=0;j<headers.length;j++){
		            obj[headers[j]] = currentline[j];
	            }

	            result.push(obj);

        }

        //return result; //JavaScript object
        return JSON.stringify(result); //JSON
        }



        //('PublishDivExpand')
        function Toggle(Obj){
            switch (Obj) {
                case "DashboardDivExpand":
                    $('.Dashboardcollaps').removeAttr("style");
                    $('.Dashboardcollaps').css({ "cursor": "pointer"});
                    $('.Dashboardexpand').css({ "display": "none", "visibility": "collapse" });
                    $('.contentContainer').css({ "display": "none", "visibility": "collapse" });
                    $('#DashboardDiv').css({ "display": "", "visibility": "" });
                    $('#DashboardDivState').val('true');
                    $(".leftNav").css({ "background-color":"#3c3c3c"});
                    $('.navLink').css({ "color": "#ffffff" });
                    $(".contentDashboard").css({ "background-color": "#f3f3f3" });
                    $('.DashboardExpand').css({ "color": "#3c3c3c" });
                   // $('#DashboardDiv').load();
                      var str = "";
                    $(".Dashboard option:selected").each(function () {
                        str += $(this).val() + " ";
                    });
                  //  alert (str)
                    if (str.trim() != "" && str != null)
                    {
                        GetDashboardInfo(str);
                    }
                    break;
                case "PublishDivExpand":
                    $('.Publishcollaps').removeAttr("style");
                    $('.Publishcollaps').css({ "cursor": "pointer"});
                    $('.Publishexpand').css({ "display": "none", "visibility": "collapse" });
                    $('.contentContainer').css({ "display": "none", "visibility": "collapse" });
                    $('#PublishDiv').css({ "display": "", "visibility": "" });
                    $('#PublishDivState').val('true');
                    $(".leftNav").css({ "background-color":"#3c3c3c"});
                    $('.navLink').css({ "color": "#ffffff" });
                    $(".contentPublish").css({ "background-color": "#f3f3f3" });
                    $('.publishExpand').css({ "color": "#3c3c3c" });
                    break;
                case "RePublishDivExpand":
                    $('#RePublishDivState').val('true');
                    $('.RePublishcollaps').removeAttr("style");
                    $('.RePublishcollaps').css({ "cursor": "pointer" });
                    $('.RePublishexpand').css({ "display": "none", "visibility": "collapse" });
                    $('.contentContainer').css({ "display": "none", "visibility": "collapse" });
                    $('#RePublishDiv').css({ "display": "", "visibility": "" });
                    $('.navLink').css({ "color": "#ffffff" });
                    $(".leftNav").css({ "background-color": "#3c3c3c" });
                    $(".contentRePublish").css({ "background-color": "#f3f3f3" });
                    $('.rePublishExpand').css({ "color": "#3c3c3c" });
                    break;
                case "DownloadDivExpand":
                    $('#DownLoadDivState').val('true');
                    $('.Downloadcollaps').removeAttr("style");
                    $('.Downloadcollaps').css({ "cursor": "pointer" });
                    $('.Downloadexpand').css({ "display": "none", "visibility": "collapse" });
                    $('.contentContainer').css({ "display": "none", "visibility": "collapse" });
                    $('#DownLoadDiv').css({ "display": "", "visibility": "" });
                    $('.navLink').css({ "color": "#ffffff" });
                    $(".leftNav").css({ "background-color": "#3c3c3c" });
                    $(".contentDownLoad").css({ "background-color": "#f3f3f3" });
                    $('.downloadExpand').css({ "color": "#3c3c3c" });
                    break;
                case "SendEmailDivExpand":
                    $('#SendEmaiDivState').val('true');
                    $('.SendEmailcollaps').removeAttr("style");
                    $('.SendEmailcollaps').css({ "cursor": "pointer" });
                    $('.SendEmailexpand').css({ "display": "none", "visibility": "collapse" });
                    $('.contentContainer').css({ "display": "none", "visibility": "collapse" });
                    $('#SendEmailDiv').css({ "display": "", "visibility": "" });
                    $('.navLink').css({ "color": "#ffffff" });
                    $(".leftNav").css({ "background-color": "#3c3c3c" });
                    $(".contentSendEmail").css({ "background-color": "#f3f3f3" });
                    $('.sendEmailExpand').css({ "color": "#3c3c3c" });

                    break;
                case "SetJsonDivExpand":
                    $('#SetJsonDivState').val('true');
                    $('.SetJsoncollaps').removeAttr("style");
                    $('.SetJsoncollaps').css({ "cursor": "pointer" });
                    /*$('.SetJsonExpand').css({ "display": "none", "visibility": "collapse" });*/
                    $('.contentContainer').css({ "display": "none", "visibility": "collapse" });
                    $('#SetJsonDiv').css({ "display": "", "visibility": "" });
                    $('.navLink').css({ "color": "#ffffff" });
                    $(".leftNav").css({ "background-color": "#3c3c3c" });
                    $(".contentSetJson").css({ "background-color": "#f3f3f3" });
                    $('.SetJsonExpand').css({ "color": "#3c3c3c" });

                    break;
                case "ViewRecordsDivExpand":
                    $('#ViewRecordsDivState').val('true');
                    $('.ViewRecordscollaps').removeAttr("style");
                    $('.ViewRecordscollaps').css({ "cursor": "pointer" });

                    $('.contentContainer').css({ "display": "none", "visibility": "collapse" });
                    $('#ViewRecordsDiv').css({ "display": "", "visibility": "" });
                    $('.navLink').css({ "color": "#ffffff" });
                    $(".leftNav").css({ "background-color": "#3c3c3c" });
                    $(".contentViewRecords").css({ "background-color": "#f3f3f3" });
                    $('.ViewRecordsExpand').css({ "color": "#3c3c3c" });

                    break;
                 case "UpdateDataSetDivExpand":
                    $('#UpdateDataSetDivState').val('true');
                    $('.UpdateDataSetcollaps').removeAttr("style");
                    $('.UpdateDataSetcollaps').css({ "cursor": "pointer" });

                    $('.contentContainer').css({ "display": "none", "visibility": "collapse" });
                    $('#UpdateDataSetDiv').css({ "display": "", "visibility": "" });
                    $('.navLink').css({ "color": "#ffffff" });
                    $(".leftNav").css({ "background-color": "#3c3c3c" });
                    $(".contentUpdateDataSet").css({ "background-color": "#f3f3f3" });
                    $('.UpdateDataSetExpand').css({ "color": "#3c3c3c" });

                    break;
                 case "SurveyReportsDivExpand":
                    $('#SurveyReportsDivState').val('true');
                    $('.SurveyReportscollaps').removeAttr("style");
                    $('.SurveyReportscollaps').css({ "cursor": "pointer" });

                    $('.contentContainer').css({ "display": "none", "visibility": "collapse" });
                    $('#SurveyReportsDiv').css({ "display": "", "visibility": "" });
                    $('.navLink').css({ "color": "#ffffff" });
                    $(".leftNav").css({ "background-color": "#3c3c3c" });
                    $(".contentSurveyReports").css({ "background-color": "#f3f3f3" });
                    $('.SurveyReportsExpand').css({ "color": "#3c3c3c" });

                    break;
                 case "LoadResponsesDivExpand":
                    $('#LoadResponsesDivState').val('true');
                    $('.LoadResponsescollaps').removeAttr("style");
                    $('.LoadResponsescollaps').css({ "cursor": "pointer" });

                    $('.contentContainer').css({ "display": "none", "visibility": "collapse" });
                    $('#LoadResponsesDiv').css({ "display": "", "visibility": "" });
                    $('.navLink').css({ "color": "#ffffff" });
                    $(".leftNav").css({ "background-color": "#3c3c3c" });
                    $(".contentLoadResponses").css({ "background-color": "#f3f3f3" });
                    $('.LoadResponsesExpand').css({ "color": "#3c3c3c" });

                    break;
                default:
            }

    }

    function GetSurveyInfo()
        {
            var SurveyId = $('#RepublishSurveyKey').val();

            var ActionUrl = '@Url.Action("GetSurveyInfo", "SurveyManager")' + '?surveyid=' + SurveyId;

            $.ajax({
                url: ActionUrl,
                type: 'POST',
                contentType: 'application/json; charset=utf-8',
                //  data: $('#myform').serialize(),
                //data:JSON.stringify(model),
                dataType: "json",
                //cache: false,
                async: false,
                success: successFunc,
                error: errorFunc
            });
            function successFunc(data)
            {

                $('#EndDateUpdate').val(data.EndDate);
                $('#RePublishSurveyName').val(data.SurveyName);

                if (data.IsDraft)
                {
                    $('#RepublishSurveyMode').val(0);
                }
                else
                {
                    $('#RepublishSurveyMode').val(1);
                }
            }
            function errorFunc(data) {
                alert('failed');
            }
    }
    function GetSurveyReports(SurveyId) {
        $('#ReportsSurveyKey').val(SurveyId)
         $("#ReportTable").find("tr:gt(0)").remove();
         var ActionUrl = '@Url.Action("GetSurveyReportList", "SurveyManager")' + '?surveyid=' + SurveyId ;

            $.ajax({
                url: ActionUrl,
                type: 'POST',
                contentType: 'application/json; charset=utf-8',
                //  data: $('#myform').serialize(),
                //data:JSON.stringify(model),
                dataType: "json",
                //cache: false,
                async: false,
                success: successFunc,
                error: errorFunc
            });

        function successFunc(data) {

           // alert(data[0].ReportId)
            $('#ReportList').show();
            $("div.Report-alert").hide();
            if (data.length > 0) {

                var table = document.getElementById("ReportTable");
                for (var i = 0; i < data.length; i++) {



                    var row = table.insertRow(i + 1);
                    var cell1 = row.insertCell(0);
                    var cell2 = row.insertCell(1);
                    var cell3 = row.insertCell(2);
                    var cell4 = row.insertCell(3);


                    cell1.innerHTML = "<input id=\"" + data[i].ReportId + "\"  class=\"btn btn-primary btn-sm\" type=\"button\" onclick=\" OpenReport('" + data[i].ReportURL.toString() + "')\"  value=\"Open\" /> <input class=\"btn btn-primary btn-sm\" type=\"button\" onclick=\"copyToClipboard1('" + data[i].ReportURL.toString() + "')\" id=\"Copy\" value=\"Copy\" />";
                   // cell2.innerHTML = "<input class=\"btn btn-primary btn-sm\" type=\"button\" onclick=\"copyToClipboard1('" + data[i].ReportURL.toString() + "')\" id=\"Copy\" value=\"Copy\" />"
                    cell2.innerHTML = data[i].ReportName;
                    cell3.innerHTML = data[i].DateCreated.toString();
                    cell4.innerHTML = data[i].RecordCount.toString();



                }
            } else {
                $('#ReportList').hide();
                $("div.Report-alert").show();
            }
        }
         function errorFunc(data) {
                alert('failed');
            }
    }
    function OpenReport(URL) {

         window.open( URL, "_blank");

    }
     function GetDataSets(SurveyId)
        {
        //alert(SurveyId)
         $('#ValueSetSearchInput').val("");
            $('#ValueSetSurveyKey').val(SurveyId)

            var ActionUrl = '@Url.Action("GetSurveyInfo", "SurveyManager")' + '?surveyid=' + SurveyId +'&getsourcetable= True';

            $.ajax({
                url: ActionUrl,
                type: 'POST',
                contentType: 'application/json; charset=utf-8',
                //  data: $('#myform').serialize(),
                //data:JSON.stringify(model),
                dataType: "json",
                //cache: false,
                async: false,
                success: successFunc,
                error: errorFunc
            });
         function successFunc(data) {

             window.SurveyDataSet = data;
           //  alert(data.SourceTables[0].TableName)
             $("#DataSetTable").find("tr:gt(0)").remove();

             if (data.SourceTables.length > 0)
             {
                 var table = document.getElementById("DataSetTable");
                 for (var i = 0; i < data.SourceTables.length; i++) {


                     var Counter = i + 1;
                     var row = table.insertRow(i + 1);

                     var cell1 = row.insertCell(0);
                     cell1.width = "33%"
                     var cell2 = row.insertCell(1);

                     cell1.innerHTML = "<button id=\"" + data.SourceTables[i].TableName + "_Edit" + "\" title=\"Load CSV\" style=\"width: 40px; margin-right: 5px; margin-top: 2px;\" class=\"btn btn-primary btn-sm\" type=\"button\"  onclick=\" EditValueSets('" + data.SourceTables[i].TableName + "')\" id=\"EditDataSet\" value=\"Load CSV\" > <span class=\"material-icons-outlined\">upload_file</span> </button><button id=\"" + data.SourceTables[i].TableName + "\" style=\"width: 40px; margin-top: 2px;\"  class=\"btn btn-primary btn-sm  \" title=\"view and edit\" type=\"button\" onclick=\" ViewDataSet('" + data.SourceTables[i].TableName + "') \"  value=\"View/Edit\" ><span class=\"material-icons-outlined\"> mode_edit</span></button>  <button id=\"" + data.SourceTables[i].TableName + "_CSV\" style=\"width: 40px;   margin-top: 2px;\"  class=\"btn btn-primary btn-sm  \" title=\"Download value set\" type=\"button\" onclick=\" GetDataSetCsv('" + data.SourceTables[i].TableName + "') \"  value=\"Download\" ><span class=\"material-icons-outlined\">file_download</span></button>";
                         cell2.innerHTML = data.SourceTables[i].TableName;
                     //cell1.innerHTML = "<button id=\""+ data.SourceTables[i].TableName +"\"  type=\"button\" class=\"btn btn-primary btn-sm\" data-toggle=\"modal\" data-target=\"#exampleModal\">view</button>";
                        $("#DataSetTable > tbody > tr:nth-child("+ Counter +")").addClass("TableRow1");

                 }



             }
         }
            function errorFunc(data) {
                alert('failed');
            }
    }
    function UpdateValueSets(ValueSet) {
     //   alert(ValueSet)
       //  $("#EditValueSetDialogBox").dialog("close");
          var ActionUrl = '@Url.Action("Index", "SurveyManager")' ;
            window.location.href = ActionUrl

    }
        function Home() {
     //   alert(ValueSet)
       //  $("#EditValueSetDialogBox").dialog("close");
          var ActionUrl = '@Url.Action("Index", "SurveyManager")' ;
            window.location.href = ActionUrl

    }
    function ViewDataSet(DataSet)
    {

        $('#SearchInput').val("");
        for (var i = 0; i < window.SurveyDataSet.SourceTables.length; i++)
        {
            if (window.SurveyDataSet.SourceTables[i].TableName == DataSet) {


                var json = window.SurveyDataSet.SourceTables[i].TableXml;
                var AllowUpdate = window.SurveyDataSet.SourceTables[i].AllowUpdate;

                if (AllowUpdate) {
                    $('input[id=AllowUpdate]').attr('checked', true);
                } else {
                    $('input[id=AllowUpdate]').attr('checked', false);
                }


                var DataSetName = window.SurveyDataSet.SourceTables[i].TableName;
                generateDynamicTable(json, "DialogBoxPrempt", DataSetName.toString(),false)
                $('#ValueSetName').text( DataSetName.toString())
                $('#DownLoadDataSet1').removeAttr('hidden');
                $('#DownLoadDataSet2').removeAttr('hidden');
                $("#ViewValueSetDialogBox").css("visibility", "visible");
               $("#ViewValueSetDialogBox").dialog("open");
                return;
            }



        }

    }
    function GetDataSetCsv(DataSet) {

         for (var i = 0; i < window.SurveyDataSet.SourceTables.length; i++)
                {
             if (window.SurveyDataSet.SourceTables[i].TableName == DataSet)
                     {


                 var json = window.SurveyDataSet.SourceTables[i].TableXml;
                 var obj = $.parseJSON(json);
                        var col = [];
                        for (var i = 0; i < obj.length; i++) {
                            for (var key in obj[i]) {
                                if (col.indexOf(key.substring(1)) === -1) {
                                    col.push(key.substring(1));
                                }
                            }
                        }
                       //var jsonObject = JSON.stringify(json);
                       var FileName =DataSet;
                       var Headder = $.parseJSON(col);

                       exportCSVFile(col, obj, FileName);



                        return;
                    }



                }


    }

    function generateDynamicTable(objArray, element , DataSetName, NoAtSign) {
        var json = typeof objArray != 'object' ? JSON.parse(objArray) : objArray;

		 // EXTRACT VALUE FOR HTML HEADER.

        var col = [];
        for (var i = 0; i < json.length; i++) {
            for (var key in json[i]) {
                if (col.indexOf(key) === -1) {
                    col.push(key);
                }
            }
        }
        window.ColumnLength = col.length;
        // CREATE DYNAMIC TABLE.

        var table = document.createElement("table");
        table.id = "ViewTable_" + element;
        table.setAttribute("class", "ViewTable");
        // CREATE HTML TABLE HEADER ROW USING THE EXTRACTED HEADERS ABOVE.

        var tr = table.insertRow(-1);                   // TABLE ROW.

        for (var i = 0; i < col.length; i++) {
            var th = document.createElement("th");      // TABLE HEADER.
            th.setAttribute("contentEditable", "false");
            if (typeof col[i] !== "undefined") {
                if (NoAtSign) {
                    th.innerHTML = col[i];
                } else {

                    th.innerHTML = col[i].substring(1);
                }
            }
            tr.appendChild(th);
        }

        // ADD JSON DATA TO THE TABLE AS ROWS.
        for (var i = 0; i < json.length; i++) {

            tr = table.insertRow(-1);
            tr.setAttribute("contentEditable", "true");

            tr.tabIndex = i;
            tr.id = "Row_" + i;
            tr.setAttribute("onclick", "SetRowId(this.id);");
            tr.setAttribute("class", "TableRow");

             //$("<td />").html('<input type="checkbox" id="Row_'+ i+'" />').appendTo(tr);
            for (var j = 0; j < col.length; j++) {


                var tabCell = tr.insertCell(-1);


                    tabCell.innerHTML = json[i][col[j]];


            }
        }

        // FINALLY ADD THE NEWLY CREATED TABLE WITH JSON DATA TO A CONTAINER.
        var divContainer = document.getElementById(element);
        divContainer.innerHTML = "";
        divContainer.setAttribute("contentEditable", "true");
        divContainer.appendChild(table);
	}

    function SetRowId(row) {
        window.SelectedRowId = row;
        $(row).css('background-color',' yellow');
    }
   function  SaveChanges(DialogBox,TableName)
    {

       var surveyid = $("#ValueSetSurveyKey").val();
       var valueSetName = $('#ValueSetName').text();
       var AllowUpdate = false;
       if ($("#AllowUpdate").is(':checked'))
       {
           AllowUpdate = true;
       }
       var table = document.getElementById("ViewTable_"+TableName);

        var ActionUrl = '@Url.Action("SaveValueSet", "SurveyManager")' + '?surveyid=' + surveyid + '&valueSetName=' + valueSetName + '&AllowUpdate='+ AllowUpdate;
       var JData = JSON.stringify(tableToJson(table));

       $.ajax({
           url: ActionUrl,
           type: 'post',

           data: { JsonData: JData },
                dataType: "json",

                async: false,
                success: successFunc,
                error: errorFunc
            });
            function successFunc(data)
            {

               $("#" + DialogBox).dialog("close");

                GetDataSets(surveyid);
                $("div.ValueSets-alert").hide();

               $("div.alert-success").show();
            }
            function errorFunc(data) {
                alert('failed');
        }

    }
    function tableToJson(table)
    {
        var data = []; // first row needs to be headers
        var headers = [];
        for (var i=0; i<table.rows[0].cells.length; i++) {
          headers[i] = table.rows[0].cells[i].innerHTML.toLowerCase().replace(/ /gi,'');
        }
        // go through cellsvar
        for (var i=1; i<table.rows.length; i++) {
        var tableRow = table.rows[i]; var rowData = {};
        for (var j=0; j<tableRow.cells.length; j++) {
        rowData[ headers[j] ] = tableRow.cells[j].innerHTML;
        } data.push(rowData);
        }
        return data;
    }


    function AddRow(TableName) {

        var table = document.getElementById("ViewTable_"+ TableName);

        var tr = table.insertRow(-1);
        var RowNumber = table.length +1
        tr.setAttribute("contentEditable", "true");
        tr.id = "Row_" + RowNumber;
         tr.setAttribute("onclick", "SetRowId(this.id);");
       // $("<td />").html('<input type="checkbox" id="Row_'+ RowNumber +'" />').appendTo(tr);
        for (var j = 0; j < ColumnLength; j++) {
                var tabCell = tr.insertCell(-1);

                tabCell.innerHTML = " ";


        }
        $("#SaveChanges").removeAttr('disabled');
    }
    function DeleteRow() {

        $("#" + window.SelectedRowId).remove();
        $("#SaveChanges").removeAttr('disabled');
    }

    function EditValueSets(DataSet) {

        $('#EditValueSetDialogBoxPrempt').text(DataSet);
        $('#ValueSetFilePath').val("");
        $('#ValueSetUserPublishKey').val("");
        $('#SelectedValueSet').val(DataSet);
        $('#DialogBoxPrempt1').text("");
        $('#SaveChanges1').attr('style','visibility:hidden');
        $('#AddRow1').attr('style','visibility:hidden');
        $('#DeleteRow1').attr('style', 'visibility:hidden');
        $('#SearchInput1').attr('style', 'visibility:hidden');
        $('#SearchInput1').val("");



       var $el = $('#FileUpload1');
        $el.wrap('<form>').closest('form').get(0).reset();
        $el.unwrap();
        $("#EditValueSetDialogBox").css("visibility", "visible");
        $("#EditValueSetDialogBox").dialog("open");
    }
    function EnableUpdateButton() {
      //  alert();
        var pattern = new RegExp('^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$', 'i');

        if ($('#ValueSetFilePath').val() != "" && $('#ValueSetUserPublishKey').val() != "") {
            if (pattern.test($('#ValueSetUserPublishKey').val()) === false) {

                alert('Security Token Should be a GUID.');
            } else {
                $('#UpdateValueSet').removeAttr('disabled');
            }
        } else {

            $('#UpdateValueSet').setAttribute('disabled');
        }

    }
    function Validate() {

        var isValid = $("#myform").validationEngine('validate') ;


    }



    function GetJsonHeader(SurveyKey,UserPublishKey)
    {


            var SurveyId = $('#'+SurveyKey).val();
        var PublisherKey = $('#'+UserPublishKey).val();

        if ($('#SurveyMode').val() == 0) {
            IsDraft = true;

        } else { IsDraft = false}
            var ActionUrl = '@Url.Action("GetJsonHeader", "SurveyManager")' + '?surveyid=' + SurveyId + '&PublisherKey=' + PublisherKey +'&IsDraft=' + IsDraft;

            $.ajax({
                url: ActionUrl,
                type: 'POST',
                contentType: 'application/json; charset=utf-8',
                //  data: $('#myform').serialize(),
                //data:JSON.stringify(model),
                dataType: "json",
                //cache: false,
                async: false,
                success: successFunc,
                error: errorFunc
            });
            function successFunc(data)
            {

             //  alert(data)

                $('#JsonHeadder').val(data);
            }
            function errorFunc(data) {
                //alert('failed');
                off();
        }

    }
     async function GetJsonResponse(SurveyKey,UserPublishKey,FileName1,HeadderOnly)
     {
        // await setTimeout( function () { on();}, 1);
      
         var SurveyId = $('#' + SurveyKey).val();
         var PublisherKey = $('#' + UserPublishKey).val();

         await GetJsonHeader(SurveyKey, UserPublishKey)

         if (HeadderOnly)
         {
             var Headder = $.parseJSON($('#JsonHeadder').val());
           // alert(Headder)
             if (Headder) {
                 var obj = $.parseJSON(JSON.stringify(Headder));
                 exportCSVFileHeadder("", obj, FileName)
                 return;
             } else {
                 alert("Please validate the provided values and try again.");

                 return;
             }
         }



        if ($('#SurveyMode').val() == 0) {
            IsDraft = true;
         } else { IsDraft = false }



         var ResponseInfoArr= JSON.parse(GetResponsJsonSize(SurveyId, IsDraft));
         var NumberOfResponsPerPage = ResponseInfoArr.NumberOfResponsPerPage;
         var NumberOfPages = ResponseInfoArr.NumberOfPages;
         var finalObj=[];
        // alert("NumberOfPages" +NumberOfPages);
        

         for (var PageNumber = 1; PageNumber < NumberOfPages + 1; PageNumber++ )
         {
             var obj = await GetJsonData(SurveyId, PublisherKey, IsDraft, NumberOfResponsPerPage, PageNumber)


             if (PageNumber == 1)
             {
                 finalObj = obj;

             }
             else
             {
                 finalObj  =   await finalObj.concat(obj)

             }


         }
         

                  $('#UserPublishKey').removeClass('input-validation-error');
                  $('#DownloadError').text('');

                  var FileName = $('#' + FileName1).val();
                  var Headder = $.parseJSON($('#JsonHeadder').val());

                  await  exportCSVFile(Headder, finalObj, FileName);
      
         await setTimeout(
             function () {

                 off();
             }, 100);



    }
    function GetJsonData(SurveyKey, UserPublishKey, IsDraft, NumberOfResponsPerPage, PageNumber)
    {
        
     
        
    
       // alert(SurveyKey);
        var ActionUrl = '@Url.Action("GetJsonResponse", "SurveyManager")' + '?surveyid=' + SurveyKey + '&PublisherKey=' + UserPublishKey + '&IsDraft=' + IsDraft + '&PageSize=' + NumberOfResponsPerPage + '&PageNumber=' + PageNumber;
        var obj;
       
             $.ajax({
                 url: ActionUrl,
                 type: 'POST',
                 contentType: 'application/json; charset=utf-8',
                 //  data: $('#myform').serialize(),
                 //data:JSON.stringify(model),
                 dataType: "json",
                 //cache: false,

                 async: false,
                 success: successFunc,
                 error: errorFunc
             });
             function successFunc(data) {

                 if (JSON.stringify(data) != 'false') {

                     obj = $.parseJSON(data);

                 }
                 else {

                     //alert('Please validate the Security Token and try again');
                     //input-validation-error valerr
                     $('#UserPublishKey').addClass('input-validation-error');
                     $('#DownloadError').text('Please validate the Security Token and try again');
                     off();
                 }
             }
             function errorFunc(data) {
                 //alert('failed');
             }

        
      
        return obj;
      
    }
    function GetResponsJsonSize(SurveyId, IsDraft)
    {
    
        var ActionUrl = '@Url.Action("GetResponseJsonSize", "SurveyManager")' + '?surveyid=' + SurveyId + '&IsDraft=' + IsDraft;
        var info = "";
            $.ajax({
                url: ActionUrl,
                type: 'POST',
                contentType: 'application/json; charset=utf-8',
                //  data: $('#myform').serialize(),
                //data:JSON.stringify(model),
                dataType: "json",
                //cache: false,
                async: false,
                success: successFunc,
                error: errorFunc1
            });
            function successFunc(data)
            {
                info = data;

            }
            function errorFunc1(data) {
               alert('failed');
            }

        return info;
    }

    function convertToCSV(objArray)
    {
        var array = typeof objArray != 'object' ? JSON.parse(objArray) : objArray;

    var str = '';

    for (var i = 0; i < array.length; i++) {
        var line = '';

        for (var index in array[i]) {
         //  alert(index)
            if (line != '') line += ','

           line += array[i][index];
            //line += `\"${array[i][index]}\"`;
              // line +="\"" + array[i][index] + "\"";
        }

        str += line + '\r\n';
    }

    return str;
  }

    function exportCSVFile(headers, items, fileTitle) {

    if (headers) {
        items.unshift(headers);
    }

    // Convert Object to JSON
    var jsonObject = JSON.stringify(items);

    var csv = convertToCSV(jsonObject);

      //  alert(items.length)
        if (items.length > 1)
        {
        var exportedFilenmae = fileTitle + '.csv'; //|| 'export.csv';

        var blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
        if (navigator.msSaveBlob) { // IE 10+
            navigator.msSaveBlob(blob, exportedFilenmae);
        } else {
            var link = document.createElement("a");
            if (link.download !== undefined) { // feature detection
                // Browsers that support HTML5 download attribute
                var url = URL.createObjectURL(blob);
                link.setAttribute("href", url);
                link.setAttribute("download", exportedFilenmae);
                link.style.visibility = 'hidden';
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
            }
        }
    } else {

        alert("No records found for the download criteria entered.")

        }
        
}
    function exportCSVFileHeadder(headers, items, fileTitle) {

      fileTitle = "Survey_Response_Template";
    if (headers) {
        items.unshift(headers);
    }

   var jsonObject = JSON.stringify(items);

      var ws_data = convertToCSVHeadder(jsonObject);

        var wb = XLSX.utils.book_new();

        wb.Props = {
                Title: "SheetJS Tutorial",
                Subject: "Test",
                Author: "Red Stapler",
                CreatedDate: new Date(2017,12,19)
        };
        wb.SheetNames.push("Responses Sheet");

        var ws = XLSX.utils.aoa_to_sheet([ws_data]);
        wb.Sheets["Responses Sheet"] = ws;
        var wbout = XLSX.write(wb, {bookType:'xlsx',  type: 'binary'});




        var exportedFilenmae = fileTitle + '.xlsx';


      var blob = new Blob([s2ab(wbout)], { type: "application/octet-stream" });

        if (navigator.msSaveBlob) { // IE 10+
            navigator.msSaveBlob(blob, exportedFilenmae);
        } else {
            var link = document.createElement("a");
            if (link.download !== undefined) { // feature detection
                // Browsers that support HTML5 download attribute
                var url = URL.createObjectURL(blob);
                link.setAttribute("href", url);
                link.setAttribute("download", exportedFilenmae);
                link.style.visibility = 'hidden';
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
            }
        }

    }
    function s2ab(s)
    {
        var buf = new ArrayBuffer(s.length); //convert s to arrayBuffer
        var view = new Uint8Array(buf);  //create uint8array as viewer
        for (var i=0; i<s.length; i++) view[i] = s.charCodeAt(i) & 0xFF; //convert to octet
        return buf;
    }
    function convertToCSVHeadder(objArray)
    {


        var array = objArray.toString().replace('{','').replace('}','').split(',');

        var output = [];



            for (var i = 0; i < array.length; i++)
            {




                    if (typeof array[i] !== 'undefined'){


                        output.push(array[i].split(':')[0].replace(/"/g, ""));
                    }

            }

       return output;
  }


    function ChangeOrg(el)
    {

       var e = document.getElementById(el);

        if (e.options[e.selectedIndex].value == 1)
        {
             var ActionUrl = '@Url.Action("Index", "SurveyManager")' + '?ResetOrg=true' ;
            window.location.href = ActionUrl
        }

    }

    function on() {

        document.getElementById("overlay").style.display = "flex";
        return true;
    }

    function off() {
        document.getElementById("overlay").style.display = "none";
        return false;
    }

</script>

@*<div style="min-height:950px; max-height:100%;">*@   @* position: absolute;top: 0; right: 0; bottom: 0; left: 0; *@

<div>

    @using (Html.BeginForm("Index", "SurveyManager", null, FormMethod.Post, new { enctype = "multipart/form-data" }))
    {

        @*<div class="container col-lg-12">*@
        <div id="header" class="row nopadding">
            <div class="col-lg-9">
                <h1 style="text-indent: 0 !important; font-family:Segoe UI !important;">

                    <img src="~/Content/images/ei_logomark_wht_outln_50px.png" /> Epi Info™ Web Survey
                </h1>
            </div>
            @if (Model.IsValidOrg && !string.IsNullOrEmpty(Model.OrgName))
            {
                <div class="col-lg-3">

                    Organization:<select id="OrgName" name="OrgName" style="width:250px; color:black" onchange="ChangeOrg('OrgName')">
                        <option value="0">  @Model.OrgName</option>
                        <option value="1" style="color:blue;text-decoration:underline !important;">Change Organization</option>
                    </select>

                </div>
            }
        </div>
        @*</div>*@
        <div class="row">



            <p id="valerr" style="text-align:left;margin-top: 0;margin-bottom: 0px; font-size: 9pt; font-weight:bold;">
                @Html.ValidationMessage("Error")
            </p>
        </div>



        if (!Model.SuccessfulPublish)
        {
            if (!Model.IsValidOrg)
            {
                <div id="contentOrganization" style="margin:1em; margin-top:40px">
                    <div id="OrgnizationDiv" class="accountdiv" style="margin-bottom: 100px; align-self:center">
                        <p style="text-align:center;margin-top: 0;margin-bottom: 0px; font-size: 22pt; font-weight:bold; color:#3f3f3f">
                            Welcome to Epi Info Survey Manager

                        </p>
                        <p style="text-align:center;margin-top: 0;margin-bottom: 0px;  font-size: 11pt; color:#3f3f3f">
                            Enter an Organization Key or a Personal Key to begin
                        </p>
                        <br>
                        <br>
                        @*<p style="text-align:right;margin-top: 0;margin-bottom: -29px; font-size: 9pt; font-weight:bold;">* indicates required fields</p>

                        *@
                    <p style="text-align:center; margin-left:15px">

                        @*<label class="accountlabel" id="OrgKeylabel">*Organization Key:</label><br>*@
                        @*  @Html.TextBoxFor(m => m.OrganizationKey, new { @class = "Account" })
        <input class="btn btn-primary btn-sm" style="width:70px;" type="submit" name="ValidateOrganization" id="ValidateOrganization" onclick=" " value="Submit" /><br>
        @Html.ValidationMessageFor(m => m.OrganizationKey, null, new { @class = "required" })*@




                        <div class="field" id="searchform">
                            @Html.TextBoxFor(m => m.OrganizationKey, new { @class = "" })
                            <input class="btn btn-primary btn-md" style="width: 70px;" type="submit" name="ValidateOrganization" id="ValidateOrganization" onclick=" " value="Submit" /><br>

                        </div>
                        @*@Html.ValidationMessageFor(m => m.OrganizationKey, null, new { @class = "required" })*@
                    </p>
                    </div>
                </div>


            }
            else
            {
                @*<div class="container">*@
                <div class="row nopadding " style="">
                    <div class="col-sm-pull-2" style="float:left; background-color: #313131; height:850px ">

                        @*<div style="float:left; background-color: #313131; height:810px">*@

                        <div class="contentPublish leftNav" style="background-color:#f3f3f3;">
                            
                            <a href="#" style="cursor:pointer;color:#ffffff" class="navLink publishExpand" onclick="Toggle('PublishDivExpand')">
                                @*<img style="display:none" src="@Url.Content("~/Content/images/Toggle-expand-alt_green.png")" />
                                 <img style="display:none" src="@Url.Content("~/Content/images/Toggle-collapse-alt_green.png")" />*@
                                <span class="material-icons-outlined ">publish</span> <span>Publish a new survey</span>

                            </a>

                        </div>
                        <div class="contentRePublish leftNav">
                            <a href="#" style="cursor:pointer;color:#ffffff" class="navLink rePublishExpand" onclick="Toggle('RePublishDivExpand')">
                                <img style="display:none" src="~/Content/images/Toggle-expand-alt_green.png" />
                                <img style="display:none" src="~/Content/images/Toggle-collapse-alt_green.png" /><span class="material-icons-outlined"> mode_edit</span> Update a survey
                            </a>

                        </div>
                        @if (System.Configuration.ConfigurationManager.AppSettings["ViewRecordsURL"] != null)
                        {
                            <div class="contentViewRecords leftNav">
                                <a href="#" style="cursor:pointer;color:#ffffff" class="navLink ViewRecordsExpand" onclick="Toggle('ViewRecordsDivExpand')">
                                    <img style="display:none" src="~/Content/images/Toggle-expand-alt_green.png" />
                                    <img style="display:none" src="~/Content/images/Toggle-collapse-alt_green.png" /> <span class="material-icons-outlined">file_download</span>View survey responses
                                </a>
                            </div>
                        }
                        else
                        {
                            <div class="contentDownLoad leftNav">
                                <a href="#" style="cursor:pointer;color:#ffffff" class="navLink downloadExpand" onclick="Toggle('DownloadDivExpand')">
                                    <img style="display:none" src="~/Content/images/Toggle-expand-alt_green.png" />
                                    <img style="display:none" src="~/Content/images/Toggle-collapse-alt_green.png" /><span class="material-icons-outlined">file_download</span> Download responses (CSV)
                                </a>
                            </div>
                        }

                        <div class="contentSendEmail leftNav">
                            <a href="#" style="cursor:pointer;color:#ffffff" class="navLink sendEmailExpand" onclick="Toggle('SendEmailDivExpand')">
                                <img style="display:none" src="~/Content/images/Toggle-expand-alt_green.png" />
                                <img style="display:none" src="~/Content/images/Toggle-collapse-alt_green.png" /><span class="material-icons-outlined">reply_all</span>Send email with survey link
                            </a>
                        </div>
                        @*<div class="contentSetJson leftNav">
                                <a href="#" style="cursor:pointer;color:#ffffff" class="navLink SetJsonExpand" onclick="Toggle('SetJsonDivExpand')">
                                    <img style="display:none" src="~/Content/images/Toggle-expand-alt_green.png" />
                                    <img style="display:none" src="~/Content/images/Toggle-collapse-alt_green.png" /> Generate Json Response for Surveys
                                </a>
                            </div>*@
                        <div class="contentDashboard leftNav" style="background-color:#f3f3f3;">
                            <a href="#" style="cursor:pointer;color:#ffffff;" class="navLink DashboardExpand" onclick="Toggle('DashboardDivExpand')">
                                <img style="display:none" src="~/Content/images/Toggle-expand-alt_green.png" />
                                <img style="display:none" src="~/Content/images/Toggle-collapse-alt_green.png" />
                                <span class="material-icons-outlined">speed</span> Survey dashboard
                            </a>

                        </div>

                        @*<div class="contentDownLoad leftNav" style="background-color:#f3f3f3;">
                                <a href="#" style="cursor:pointer;color:#ffffff;" class="navLink downloadExpand" onclick="Toggle('DownloadDivExpand')">
                                    <img style="display:none" src="~/Content/images/Toggle-expand-alt_green.png" />
                                    <img style="display:none" src="~/Content/images/Toggle-collapse-alt_green.png" />
                                    DownLoad CSV
                                </a>

                            </div>*@

                        @*</div>*@

                        <div class="contentUpdateDataSet leftNav" style="background-color:#f3f3f3;">
                            <a href="#" style="cursor:pointer;color:#ffffff;" class="navLink UpdateDataSetExpand" onclick="Toggle('UpdateDataSetDivExpand')">
                                <img style="display:none" src="~/Content/images/Toggle-expand-alt_green.png" />
                                <img style="display:none" src="~/Content/images/Toggle-collapse-alt_green.png" />
                                <span class="material-icons-outlined">grid_view </span> Survey value sets
                            </a>

                        </div>


                        <div class="contentSurveyReports leftNav" style="background-color:#f3f3f3;">
                            <a href="#" style="cursor:pointer;color:#ffffff;" class="navLink SurveyReportsExpand" onclick="Toggle('SurveyReportsDivExpand')">
                                <img style="display:none" src="~/Content/images/Toggle-expand-alt_green.png" />
                                <img style="display:none" src="~/Content/images/Toggle-collapse-alt_green.png" />
                                <span class="material-icons-outlined">dashboard</span>Survey reports (Beta)
                            </a>

                        </div>


                        <div class="contentLoadResponses leftNav" style="background-color:#f3f3f3;">
                            <a href="#" style="cursor:pointer;color:#ffffff;" class="navLink LoadResponsesExpand" onclick="Toggle('LoadResponsesDivExpand')">
                                <img style="display:none" src="~/Content/images/Toggle-expand-alt_green.png" />
                                <img style="display:none" src="~/Content/images/Toggle-collapse-alt_green.png" />
                                <span class="material-icons-outlined">
                                    upload_file
                                </span>Load responses from .xlsx (Beta)
                            </a>

                        </div>

                    </div>
                    <!--end of nav-->

                    <div class="col-lg-offset-10 nopadding" style="float:left; width:70%">
                        @*<div style="float:left;width: 70%">*@
                        <div id="PublishDiv" class="contentContainer" style="margin-bottom:10px; align-self:center;margin:1em;">
                            <h1>Publish A New Survey</h1>
                            <p id="RequiredLable" class="requiredField">* indicates required fields</p>
                            <div class="accountdiv col-md-10">
                                <div>
                                    <label class="accountlabel" id="FilePath"><span style="color:#900000;">*</span> Excel based survey:</label> <a onclick="OpenFile()" style="text-decoration:none!important; font-size:14px" href="~/Content/Text/Survey.xlsx">Excel Template</a><br>
                                    @*<input id="Path" class="Account" type="text" value=""   >*@

                                <div class="field" style="margin: unset !important ; height:29px;">
                                    @Html.TextBoxFor(m => m.Path, new { @class = "  Path" })

                                    @*<label for="file-upload" class="submits create"   onclick="javascript: document.getElementById('Newfile').click();">
            Browse
        </label>*@
                                    <input for="file-upload" class="btn btn-primary btn-sm" style="width:70px; " type="button" id="PublishButton" onclick="javascript: document.getElementById('Newfile').click();" value="Browse" />
                                </div>
                                        @Html.ValidationMessageFor(m => m.Path, null, new { @class = "required" })
                                        <input id="Newfile" type="file" style='visibility: hidden;' name="Newfile" accept=".xls,.xlsx,.csv" onchange="ChangeText(this, 'Path');" />


                                    </div>
                                    <br>
                                    <div>

                                        <label class="accountlabel" id="SurveyNamelabel"><span style="color:#900000;">*</span> Survey Name:</label><br>
                                         
                                            @Html.TextBoxFor(m => m.SurveyName, new { @class = "Account" }) <br>
                                         
                                        @Html.ValidationMessageFor(m => m.SurveyName, null, new { @class = "required" })
                                    </div>
                                        <br>
                                        <div>

                                            <label style="text-align:left" class="accountlabel" id="SurveyNamelabel"><span style="color:#900000;">*</span> End Date:</label><br>
                                            
                                                @Html.TextBoxFor(m => m.EndDate, new { @class = " Account validate[required,custom[date]]  datepicker" }) <br>
                                          
                                                @Html.ValidationMessageFor(m => m.EndDate, null, new { @class = "required" })


                                            </div>
                                            <script>$('#EndDate').datepicker({ changeMonth: true, changeYear: true, yearRange: '-110:+10' });</script>
                                            <script>$('#EndDate').BlockEnter('EndDate');</script>

                                            @*<p>
            <input type="checkbox" id="ExistingSurvey" value="@Model.UpdateExisting" name="ExistingSurvey" for="ExistingSurveyLabel" onclick="HidUnhidSurveyId(this)" />

            <label class="accountlabel" id="ExistingSurveyLabel" style="width:330px;">
                <span style="font-weight:normal !important;">Update Existing Survey</span>
            </label>
            <div id="SurveyIdDiv">
                <label class="accountlabel" id="SurveyIdlabel">*Survey Id:</label><br>

                @Html.TextBoxFor(m => m.SurveyKey, new { @class = "Account" }) <br>
                @Html.ValidationMessageFor(m => m.SurveyKey, null)
                <br>
                <label class="accountlabel" id="SecurityTokenlabel">*Security Token:</label><br>

                @Html.TextBoxFor(m => m.UserPublishKey, new { @class = "Account" }) <br>
                @Html.ValidationMessageFor(m => m.UserPublishKey, null)


            </div>

        </p>*@
                                            <br />
                                            @if (Model.IsAuthenticated)
                                            {

                                                <div style="width: 100%; display: inline;">
                                                    <input type="checkbox" id="IagreeBox" for="IagreeBoxLabel" onchange="EnablePublishButton(this);" />


                                                    <label class="accountlabel" for="IagreeBox" id="IagreeBoxLabel" style="width:330px;">
                                                        <span style="font-weight:normal !important;">I agree to the</span>
                                                        <span class="TermsSpan" style="font-weight:bold;" onclick="OpenFile_txt()">
                                                            Terms of service and conditions of use

                                                        </span>
                                                    </label>
                                                </div>
                                                <br />
                                                <br />
                                                <input class="btn btn-primary btn-sm" type="submit" disabled="disabled" name="PublishSurvey" id="PublishSurvey" value="Publish" style="margin-right:90px;" />
                                            }
                                            else
                                            {
                                                <input class="btn btn-primary btn-sm" type="submit" name="PublishSurvey" id="PublishSurvey" value="Publish" style="margin-right:90px;" />

                                            }

                                            <input type="hidden" id="ExistingSurvey_Hidden" value="@Model.UpdateExisting.ToString()" />
                                        </div>
                        </div>

                        <div id="RePublishDiv" class="contentContainer" style="margin-bottom:10px; align-self:center; display:none; visibility:collapse;margin:1em;">
                            <h1>Update A Survey</h1>
                            <p id="RequiredLable" class="requiredField">* indicates required fields</p>
                            <div class="accountdiv col-md-10">
                                <div>

                                    <label class="accountlabel" id="FilePath1">Excel based survey:</label>
                                    @*<a onclick="OpenFile()" href="~/Content/Text/Survey.xlsx">Excel Template</a>*@ <br /><span style="font-size: 14px">This file is only needed if survey content has changed!</span><br>
                                    @*<input id="Path" class="Account" type="text" value=""   >*@
                                    <div class="field" style="margin: unset !important ; height:29px;">
                                        @Html.TextBoxFor(m => m.RepublishPath, new { @class = "  RepublishPath" })

                                        @*<label for="file-upload" class="submits create"   onclick="javascript: document.getElementById('Newfile').click();">
                Browse
            </label>*@
                                        <input for="file-upload" class="btn btn-primary btn-sm" style="width:70px;" type="button" id="RePublishButton" onclick="javascript: document.getElementById('Newfile1').click();" value="Browse" /><br>
                                        </div>
                                        @Html.ValidationMessageFor(m => m.RepublishPath, null, new { @class = "required" })
                                        <input id="Newfile1" type="file" style='visibility: hidden;' name="Newfile1" accept=".xls,.xlsx,.csv" onchange="ChangeText(this, 'RepublishPath');" />


                                    </div>
                                    <label class="accountlabel" id="SurveyIdlabel1"><span style="color:#900000;">*</span> Survey Id:</label><br>

                                    @Html.DropDownListFor(m => m.RepublishSurveyKey, new SelectList(Model.SurveyNameList, "Value", "Text", 0), "Select Survey", new { @class = "Account", @onchange = "GetSurveyInfo()" })<br>

                                    @Html.ValidationMessageFor(m => m.RepublishSurveyKey, null)
                                    <br>

                                    @if (!Model.IsAuthenticated)
                                    {

                                        <label class="accountlabel" id="SecurityTokenlabel1"><span style="color:#900000;">*</span> Security Token:</label><br>
                                        /**/

                                        @Html.TextBoxFor(m => m.RepublishUserPublishKey, new { @class = "Account" }) <br>
                                        @Html.ValidationMessageFor(m => m.RepublishUserPublishKey, null)<br>
                                    }
                                    <label class="accountlabel" id="FileName3">Survey Mode:</label><br>


                                    @Html.DropDownListFor(model => model.RepublishSurveyMode, new SelectList(
                                                   new List<Object> { new { value = "0", text = "Draft" }, new { value = "1", text = "Final" }, }, "value", "text", 2), new { @class = "Account" })<br>
                                    @Html.ValidationMessageFor(m => m.RepublishSurveyMode, null)

                                    <br />
                                    <label style="text-align:left" class="accountlabel" id="SurveyNamelabel1">End Date:</label><br>
                                    @Html.TextBoxFor(m => m.EndDateUpdate, new { @class = "Account validate[required,custom[date]]  datepicker" }) <br>
                                    @Html.ValidationMessageFor(m => m.EndDateUpdate, null, new { @class = "required" })



                                    <script>$('#EndDateUpdate').datepicker({ changeMonth: true, changeYear: true, yearRange: '-110:+10' });</script>
                                    <script>$('#EndDateUpdate').BlockEnter('EndDateUpdate');</script>

                                    <br />

                                    <input class="btn btn-primary btn-sm" type="submit" name="RePublishSurvey" id="RePublishSurvey" value="Update" style="margin-right:90px;" />


                                    <input type="hidden" id="ExistingSurvey_Hidden1" value="@Model.UpdateExisting.ToString()" />
                                    <input type="hidden" id="RePublishSurveyName" value="" name="RePublishSurveyName" />
                                </div>
                        </div>






                        <div id="DownLoadDiv" class="contentContainer" style="margin-bottom: 100px; align-self:center;display:none; visibility:collapse;margin:1em">
                            <div id="overlay" style="height: 100% ; width:100% ;">
                                <div class="w-100 d-flex justify-content-center align-items-center">
                                    <div class="spinner"> </div>
                                </div>
                            </div>
                            <h1>Download Responses</h1>
                            <p id="RequiredLable" class="requiredField">* indicates required fields</p>


                            <div class="accountdiv col-md-10">

                                @*<p style="text-align:center;margin-top: 0;margin-bottom: 0px; font-size: 9pt; font-weight:bold;">
                Epi Info Web Survey Download Tool (.CSV)
            </p>
            <br><br>
            <p style="text-align:right;margin-top: 0;margin-bottom: -29px; font-size: 9pt; font-weight:bold;">* indicates required fields</p>*@

                                <div>
                                    @*<label class="accountlabel" id="OrgKeylabel">*Organization Key:</label><br>
                @Html.TextBoxFor(m => m.OrganizationKey, new { @class = "Account" }) <br>
                @Html.ValidationMessageFor(m => m.OrganizationKey, null, new { @class = "required" })<br>*@

                                    <label class="accountlabel" id="SurveyIdlabel"><span style="color:#900000;">*</span> Survey Id:</label><br>


                                    @Html.DropDownListFor(m => m.SurveyKey, new SelectList(ViewBag.SurveyNameList1, "Value", "Text", 0), "Select Survey", new { @class = "Account" })<br>

                                    @Html.ValidationMessageFor(m => m.SurveyKey, null)
                                    <br />
                                    @if (!Model.IsAuthenticated)
                                    {
                                        <label class="accountlabel" id="SecurityTokenlabel"><span style="color:#900000;">*</span> Security Token:</label><br>
                                        /**/

                                        @Html.TextBoxFor(m => m.UserPublishKey, new { @class = "Account" }) <br>
                                        @Html.ValidationMessageFor(m => m.UserPublishKey, null)<p id="DownloadError" class="requiredField"></p><br>

                                    }

                                    <label class="accountlabel" id="FileName1"><span style="color:#900000;">*</span> Survey Mode:</label><br>


                                    @Html.DropDownListFor(model => model.SurveyMode, new SelectList(
                                           new List<Object> { new { value = "0", text = "Draft" }, new { value = "1", text = "Final" }, }, "value", "text", 2), new { @class = "Account" })<br>
                                    @Html.ValidationMessageFor(m => m.SurveyMode, null)
                                    <br />
                                    <label class="accountlabel" id="FileName2"><span style="color:#900000;">*</span> File Name:</label><br>

                                    @Html.TextBoxFor(m => m.FileName, new { @class = "Account" }) <br>
                                    @Html.ValidationMessageFor(m => m.FileName, null)

                                </div>
                                @*<div id="spinner">
                Working on your request...
            </div>*@

                                <br />

                                @* <input class="submits create " type="submit" onclick=" clear();  " name="DownLoadResponse" id="DownLoadResponse" value="DownLoad" style="margin-right:90px;" />*@


                                <input class="btn btn-primary btn-sm" type="button" onclick=" on(); setTimeout( function () { GetJsonResponse('SurveyKey','UserPublishKey','FileName',false) ;}, 1000); clear();   " name="DownLoadResponse" id="DownLoadResponse" value="DownLoad" style="margin-right:90px;" />

                            </div>
                        </div>



                        <div id="SendEmailDiv" class="contentContainer" style="margin-bottom: 100px; align-self:center ;display:none; visibility:collapse;margin:1em">
                            <h1>Send Email With Survey Link</h1>
                            <p id="RequiredLable" class="requiredField">* indicates required fields</p>
                            <div class="accountdiv col-md-10">

                                <div>

                                    <label class="accountlabel" id="FilePath"><span style="color:#900000;">*</span> Excel Email list:</label> <a onclick="OpenFile()" style="font-size:14px;text-decoration:none!important" href="~/Content/Text/EmailList.xlsx">Excel Template (Email List)</a><br>
                                    @*<input id="Path" class="Account" type="text" value=""   >*@
                                    <div class="field" style="margin: unset !important ; height:29px;">
                                        @Html.TextBoxFor(m => m.EmailFilePath, new { @class = "  Path2" })

                                        @*<label for="file-upload" class="submits create"   onclick="javascript: document.getElementById('Newfile').click();">
                Browse
            </label>*@
                                        <input for="file-upload" class="btn btn-primary btn-sm" style="width:70px;" type="button" id="PublishButton" onclick="javascript: document.getElementById('Newfile2').click();" value="Browse" />
                                        </div>
                                        <br>

                                        @Html.ValidationMessageFor(m => m.EmailFilePath, null, new { @class = "required " })
                                        <input id="Newfile2" type="file" style='visibility: hidden;' name="Newfile2" accept=".xls,.xlsx,.csv" onchange="ChangeText(this, 'Path2');" />


                                        <br />

                                        <label class="accountlabel" id="SurveyIdlabel"><span style="color:#900000;">*</span> Survey Id:</label><br>


                                        @Html.DropDownListFor(m => m.EmailSurveyKey, new SelectList(ViewBag.SurveyNameList1, "Value", "Text", 0), "Select Survey", new { @class = "Account" })<br>

                                        @Html.ValidationMessageFor(m => m.EmailSurveyKey, null)
                                        <br />
                                        @if (!Model.IsAuthenticated)
                                        {
                                            <label class="accountlabel" id="SecurityTokenlabel"><span style="color:#900000;">*</span> Security Token:</label><br>

                                            @Html.TextBoxFor(m => m.EmailUserPublishKey, new { @class = "Account" }) <br>
                                            @Html.ValidationMessageFor(m => m.EmailUserPublishKey, null)<br>
                                        }


                                        <input data-val="false"
                                               id="IsBulk"
                                               name="IsBulk"
                                               type="checkbox"
                                               value="true" />
                                        <label class="accountlabel" id="FilePath">Bulk (To generate multiple response URL's for one email address.)<a onclick="OpenFile()" style="font-size:14px;text-decoration:none!important" href="~/Content/Text/EmailList-Bulk.xlsx">Excel Template (Bulk Email List)</a></label>
                                    </div>




                                    <input class="btn btn-primary btn-sm" type="submit" onclick="clear()" name="SendEmail" id="SendEmail" value="Send Email" style="margin-right:90px;" />
                                    @*<button type="submit" class="btn btn-primary btn-sm  " name="SendEmail" id="SendEmail" value="Send Email" data-loading-text="<i class='fa fa-spinner fa-spin '></i> Processing Order">Submit Order</button>*@


                                </div>

                        </div>



                        <div id="SetJsonDiv" class="contentContainer" style="margin-bottom: 100px; align-self:center ;display:none; visibility:collapse;margin:1em">
                            @*<input class="submits create " type="submit" name="SetJson" id="SetJson" value="Set Json" style="margin-right:90px;" />*@
                        </div>


                        <div id="ViewRecordsDiv" class="contentContainer" style="margin-bottom: 100px; align-self:center ;display:none; visibility:collapse;margin:1em">
                            <h1>View Survey Responses</h1>

                            <div class="accountdiv col-md-10">

                                <div>



                                </div>


                                <a href="@Model.ViewRecordsURL" target="_blank" style=" height:23px;cursor:pointer;color: white !important; background-color:#1d60ac;font-weight: bold" class="navLink publishExpand">
                                    <img style="display:none" src="~/Content/images/Toggle-expand-alt_green.png" />
                                    <img style="display:none" src="~/Content/images/Toggle-collapse-alt_green.png" />
                                    Launch Data Viewer
                                </a>

                                @*<input class="submits create" type="button" name="ViewRecords" id="ViewRecords" value="View Records" style="margin-right:90px;" />*@


                            </div>
                        </div>


                        <div id="DashboardDiv" class="contentContainer" style="margin-bottom: 100px; align-self:center ;display:none; visibility:collapse;margin:1em">

                            <h1>Survey Dashboard</h1>

                            <div class="accountdiv col-md-pull-12">


                                @Html.DropDownListFor(m => m.EmailSurveyKey, new SelectList(ViewBag.SurveyNameList1, "Value", "Text", 0), "Select Survey To View Dashboard", new { @class = "Account Dashboard" })

                                <script>
                                    function FormatDate(DateString)
                                    {
                                            var date = new Date(DateString);
                                            var result = ((date.getMonth().toString().length > 1) ? (date.getMonth() + 1) : ('0' + (date.getMonth() + 1))) + '/' + ((date.getDate().toString().length > 1) ? date.getDate() : ('0' + date.getDate())) + '/' + date.getFullYear()
                                            return result;
                                    }
                                    function FormatDate2(date)
                                    {
                                        var newdate = date.split("/")

                                        return newdate[2] + "-" + newdate[0] +"-"+newdate[1]
                                    }
                                     function GetDashboardInfo(SurveyId)
                                     {


                                                    var ActionUrl = '@Url.Action("GetDashboardInfo", "SurveyManager")' + '?surveyid=' + SurveyId;

                                                    $.ajax({
                                                        url: ActionUrl,
                                                        type: 'POST',
                                                        contentType: 'application/json; charset=utf-8',
                                                        dataType: "json",
                                                        async: false,
                                                        success: successFunc,
                                                        error: errorFunc
                                                    });
                                                    function successFunc(data)
                                                    {

                                                        var obj = JSON.parse(data);
                                                       // alert(obj.RecordCountPerDate[obj.DateList[1]]);

                                                        //alert(obj.DateList.length);

                                                        var _dateArray= new Array("x");
                                                        var _countArray=new Array("Record Count");
                                                        for (var i = 0; i < obj.DateList.length; i++)
                                                        {

                                                            _dateArray.push(FormatDate2(obj.DateList[i]))
                                                            _countArray.push(obj.RecordCountPerDate[obj.DateList[i] ])
                                                        }




                                                         $('#SurveyName1').html(obj.SurveyInfo.SurveyName)
                                                         $('#StartDate1').html(FormatDate(obj.SurveyInfo.StartDate))
                                                        $('#CloseDate1').html(FormatDate(obj.SurveyInfo.ClosingDate))

                                                        if (obj.SurveyInfo.IsDraftMode) {
                                                            $('#SurveyMode1').html('Draft')
                                                        } else {
                                                             $('#SurveyMode1').html('Final')
                                                        }
                                                         $('#RecordsCount').html(obj.RecordCount)

                                                       var chart = c3.generate({
                                                                                data: {
                                                                                    x: 'x',
                                                                            //        xFormat: '%Y%m%d', // 'xFormat' can be used as custom format of 'x'
                                                                                    columns: [

                                                                                        _dateArray,_countArray
                                                                                    ]
                                                                                },
                                                                                axis: {
                                                                                    x: {
                                                                                        type: 'timeseries',
                                                                                        tick: {
                                                                                            format: '%m/%d/%Y',
                                                                                            rotate: 90,
                                                                                            multiline: false
                                                                                        }
                                                                                    }
                                                                                }
                                                       }




                                                       );






                                                        var piechart = c3.generate({
                                                            bindto: '#piechart',
                                                            data: {
                                                                columns: [
                                                                    ['Submited', obj.SubmitedRecordCount],
                                                                    ['Saved', obj.SavedRecordCount],
                                                                    ['Started', obj.StartedRecordCount],
                                                                    ['Downloaded', obj.DownloadedRecordCount]
                                                                ],
                                                                type: 'pie'
                                                            },
                                                            pie: {
                                                                label: {
                                                                    format: function (value, ratio, id) {
                                                                        return d3.format('#')(value);
                                                                    }
                                                                }
                                                            }
                                                        });


                                                    }
                                                    function errorFunc(data) {
                                                        alert('failed');
                                                    }
                                                }
                                    $(".Dashboard").change(function () {



                                        var str = "";
                                        $(".Dashboard option:selected").each(function () {
                                          str += $(this).val() + " ";
                                        });

                                        GetDashboardInfo(str);




                                    });

                                </script>


                                <br>
                                <br>
                                <h1>Record Count</h1>
                                <h1 id="RecordsCount">0</h1>

                                <br>
                                <br>
                                <div class="row">
                                    <div class="col-md-4" id="piechart" style="float:left ; "></div>

                                    <div class="col-md-7" id="chart" style="float:left; "></div>
                                </div>
                                <br>
                                <br>

                                <div>


                                    <table>
                                        <tr>
                                            <th>Survey Name</th>
                                            <th>Start Date</th>
                                            <th>Close Date</th>
                                            <th>Survey Mode</th>
                                        </tr>
                                        <tr>
                                            <td id="SurveyName1">Survey Name</td>
                                            <td id="StartDate1">9/99/9999</td>
                                            <td id="CloseDate1">9/9/9999</td>
                                            <td id="SurveyMode1">-----</td>
                                        </tr>

                                    </table>

                                </div>



                            </div>
                        </div>

                        <div id="UpdateDataSetDiv" class="contentContainer" style="margin-bottom: 100px; align-self:center ;display:none; visibility:collapse;margin:1em">
                            <h1>Survey Value Sets</h1>
                            <br />

                            @*<div class="alert ValueSets-alert alert-warning alert-dismissible fade show" role="alert">
                                    <strong>Note:</strong>  Republishing a survey will override changes made through this process.
                                    <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                                        <span aria-hidden="true">&times;</span>
                                    </button>
                                </div>*@




                            <div class="alert alert-success  " role="alert">
                                Value Set was successfully updated!
                                <button type="button" class="close" data-hide="alert">
                                    <span aria-hidden="true">&times;</span>
                                </button>
                            </div>
                            <script>
                                $(function () {
                                    $("[data-hide]").on("click", function () {
                                        $(this).closest("." + $(this).attr("data-hide")).hide();
                                    });
                                });
                            </script>
                            <div class="accountdiv col-md-pull-9">
                                <label class="accountlabel" id="SurveyIdlabel"><span style="color:#900000;">*</span> Survey Id:</label><br>


                                @Html.DropDownListFor(m => m.EmailSurveyKey, new SelectList(ViewBag.SurveyNameList1, "Value", "Text", 0), "Select Survey To View Value Sets", new { @class = "Account DataSets" })
                                <br />

                                <br />
                                <div>


                                    <p><input class="form-control ValueSetSearchInput  " style="width:70%" id="ValueSetSearchInput" type="text" placeholder="Search.."></p>
                                    <br />
                                    <table class="ViewTable1" id="DataSetTable" style="width:70%">

                                        <tr class="TableRow1">
                                        </tr>

                                    </table>



                                </div>

                            </div>

                        </div>

                        <div id="SurveyReportsDiv" class="contentContainer" style="margin-bottom: 100px; align-self:center ;display:none; visibility:collapse;margin:1em">
                            <h1>Survey Reports</h1>
                            <br />


                            <div class="accountdiv col-md-pull-9">
                                <label class="accountlabel" id="SurveyIdlabel"><span style="color:#900000;">*</span> Survey Id:</label><br>


                                @Html.DropDownListFor(m => m.EmailSurveyKey, new SelectList(ViewBag.SurveyNameList1, "Value", "Text", 0), "Select Survey To View Reports", new { @class = "Account Report" })
                                <br />

                                <br />
                                <div id="ReportList">


                                    <table id="ReportTable" style="width:100%">

                                        <tr>
                                            <td style="font:bold"></td>
                                            <td style="font:bold">Canvas</td>
                                            <td style="font:bold">Date created</td>
                                            @*<td style="font:bold">Data Source</td>*@
                                            <td style="font:bold">Record Count</td>
                                        </tr>

                                    </table>



                                </div>
                                <div class="alert Report-alert alert-warning alert-dismissible fade show" role="alert">
                                    <strong>No available reports!</strong>
                                    <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                                        <span aria-hidden="true">&times;</span>
                                    </button>
                                </div>
                            </div>


                        </div>

                        @*LoadResponsesDivExpand*@



                        <div id="LoadResponsesDiv" class="contentContainer" style="margin-bottom: 100px; align-self:center ;display:none; visibility:collapse;margin:1em">
                            <h1>Load Responses From .xlsx</h1>
                            <p id="RequiredLable" class="requiredField">* indicates required fields</p>
                            <div class="accountdiv col-md-10">

                                <div>

                                    <label class="accountlabel" id="SurveyIdlabel"><span style="color:#900000;">*</span> Survey Id:</label><br>


                                    @Html.DropDownListFor(m => m.LoadResponsesSurveyKey, new SelectList(ViewBag.SurveyNameList1, "Value", "Text", 0), "Select Survey", new { @class = "Account" })
                                    @Html.ValidationMessageFor(m => m.LoadResponsesSurveyKey, null)
                                    <br />
                                    <br />



                                    @if (!Model.IsAuthenticated)
                                    {
                                        <label class="accountlabel" id="SecurityTokenlabel"><span style="color:#900000;">*</span> Security Token:</label><br>

                                        @Html.TextBoxFor(m => m.LoadResponseUserPublishKey, new { @class = "Account" }) <br>
                                        @Html.ValidationMessageFor(m => m.LoadResponseUserPublishKey, null)<br>
                                    }
                                    <br />
                                    <input class="btn btn-primary btn-sm" type="button" disabled="disabled" onclick="GetJsonResponse('LoadResponsesSurveyKey', 'LoadResponseUserPublishKey', 'FileName', true); " name="DownLoadTemplate" id="DownLoadTemplate" value="Get Template (.xlsx)" style="margin-right:90px;" />
                                    <br />



                                    <br />
                                    <label class="accountlabel" id="FilePath"><span style="color:#900000;">*</span>File (.xlsx):</label> <br>

                                    <div class="field" style="margin: unset !important ; height:29px;">
                                        @Html.TextBoxFor(m => m.EmailFilePath, new { @class = "  Path2" })


                                        <input for="file-upload" class="btn btn-primary btn-sm" style="width:70px;" type="button" id="PublishButton" onclick="javascript: document.getElementById('Newfile3').click();" value="Browse" />
                                        </div>
                                        <br>

                                        @Html.ValidationMessageFor(m => m.EmailFilePath, null, new { @class = "required " })
                                        <input id="Newfile3" type="file" style='visibility: hidden;' name="Newfile3" accept=".xls,.xlsx" onchange="ChangeText(this, 'Path2');" />




                                    </div>




                                    <input class="btn btn-primary btn-sm" type="submit" onclick="clear()" name="LoadResponses" id="LoadResponses" value="Load" style="margin-right:90px;" />


                                </div>

                        </div>

                    </div>







                </div>
                @*</div>*@
            }
        }
        else
        {
            if (Model.SuccessfulPublish)
            {

                <div id="SuccessfullPublishcontent" style="margin:1em;">

                    <div class="accountdiv" style="margin-bottom: 100px;">



                        <p style="text-align:left;margin-top: 0; font-size: 9pt; font-weight:bold; color:green">

                            <label class="accountlabel" id="SuccessfullPublish">Your Form  has been published!  </label><br>


                        </p>
                        <p>
                            <label class="accountlabel" style=" font-size 9pt; font-weight:bold; color:red " id="PublishedSurveyInfo">Important: </label>
                            <label id="PublishedSurveyInfo">Please copy and save the Form ID and Security Token to download collected responses. </label><br>

                        </p>
                        <p>
                            <textarea id="FormInfo" readonly="readonly" style="width:600px;height:100px ; align-content:flex-end">

                                Survey Name: @Model.SurveyName
                                Survey Id: @Model.SurveyKey
                                Security Token: @Model.UserPublishKey
                                Survey URL: @Model.SurveyURL
                                Survey End Date: @Model.EndDate
                                @if (ViewBag.IsNewOrg)
                                {
                                    @ViewBag.Org  @Model.OrganizationKey
                                }
                            </textarea>

                        </p>


                        <p>
                            <input class="btn btn-primary btn-sm" onclick="OpenSurvey('@Model.SurveyURL')" type="button" id="LaunchSurvey" value="Launch Survey" />
                            <input class="btn btn-primary btn-sm" type="button" onclick="copyToClipboard()" id="Copy" value="Copy All to Clipboard" />
                            <button type="button" class="btn btn-primary btn-sm" onclick="Home()"><i class="fa fa-home"></i> Home</button>
                        </p>

                    </div>



                </div>
            }

            if (Model.SuccessfullySentEmail)
            {
                <div id="SuccessfullPublishcontent" style="margin:1em;">

                    <div class="accountdiv" style="margin-bottom: 100px;">
                        <p style="text-align:left;margin-top: 0; font-size: 9pt; font-weight:bold; color:green">

                            <label class="accountlabel" id="SuccessfullPublish">  Emails have been successfully sent! </label><br>


                        </p>

                    </div>
                </div>
            }

            if (Model.JsonIsSet)
            {
                <div id="SuccessfullJsoncontent" style="margin:1em;">

                    <div class="accountdiv" style="margin-bottom: 100px;">
                        <p style="text-align:left;margin-top: 0; font-size: 9pt; font-weight:bold; color:green">

                            <label class="accountlabel" id="SetJsonSuccessfull">  Json column have been successfully sent! </label><br>


                        </p>

                    </div>
                </div>
            }





        }
        <input type="hidden" id="RePublishDivState" value="@Model.RePublishDivState.ToString()" name="RePublishDivState" />
        <input type="hidden" id="PublishDivState" value="@Model.PublishDivState.ToString()" name="PublishDivState" />
        <input type="hidden" id="DownLoadDivState" value="@Model.DownLoadDivState.ToString()" name="DownLoadDivState" />
        <input type="hidden" id="SendEmaiDivState" value="@Model.SendEmaiDivState.ToString()" name="SendEmaiDivState" />
        <input type="hidden" id="SetJsonDivState" value="@Model.SetJsonDivState.ToString()" name="SetJsonDivState" />
        <input type="hidden" id="ViewRecordsDivState" value="@Model.ViewRecordsDivState.ToString()" name="ViewRecordsDivState" />
        <input type="hidden" id="UpdateDataSetDivState" value="@Model.UpdateDataSetDivState.ToString()" name="UpdateDataSetDivState" />
        <input type="hidden" id="SurveyReportsDivState" value="@Model.SurveyReportsDivState.ToString()" name="SurveyReportsDivState" />
        <input type="hidden" id="LoadResponsesDivState" value="@Model.LoadResponsesDivState.ToString()" name="LoadResponsesDivState" />
        <input type="hidden" id="JsonHeadder" value="" name="JsonHeadder" />
        <input type="hidden" id="DataSets" value="" name="DataSets" />



    }
    <div id="TermsDialog" style="visibility:hidden">
        @Html.Raw(ViewData["TermOfUse1"].ToString())
    </div>
    <div id="ViewValueSetDialogBox" style="visibility:hidden" title="View Value Sets">

        <p style="font:15px Segoe UI;font-weight:bold">Name: <label style="font:15px Segoe UI" id="ValueSetName">Prempt</label></p>

        <input type="checkbox" id="AllowUpdate" for="AllowUpdateLabel" value="@Model.AllowUpdateValueSet" />


        <label style="font:15px Segoe UI" for="AllowUpdate" id="AllowUpdateLabel">
            <span>Update value set when survey is republished.</span>

        </label>

        <br><br>
        <p><input class="form-control SearchInput" id="SearchInput" type="text" placeholder="Search.."></p>
        <p><label id="DialogBoxPrempt">Prempt</label></p>


        <input class="btn btn-danger" type="button" name="" id="DeleteRow" onclick="DeleteRow('DialogBoxPrempt')" value="Delete Row" style="margin-right:20px;" />
        <input class="btn btn-primary btn-sm" type="button" name="" id="AddRow" onclick="AddRow('DialogBoxPrempt');" value="Add Row" style="margin-right:20px;" />
        <input class="btn btn-success" type="button" name="" id="SaveChanges" onclick="SaveChanges('ViewValueSetDialogBox','DialogBoxPrempt')" value="Save & close" style="margin-right:20px;" />

    </div>

    <div id="EditValueSetDialogBox" style="visibility:hidden" title="Update Value Sets">
        @using (Html.BeginForm("Index", "SurveyManager", null, FormMethod.Post, new { id = "myform", enctype = "multipart/form-data" }))
        {
            <p><label id="EditValueSetDialogBoxPrempt" style="font:bolder">Prempt</label></p>

            <div class="accountdiv col-md-12">
                <div>
                    <label class="accountlabel" id="FilePath"><span style="color:#900000;">*</span> Value Sets:</label> <br>


                    @Html.TextBoxFor(m => m.ValueSetFilePath, new { @class = "Account ValueSetFilePath" })


                    <input for="file-upload" class="btn btn-primary btn-sm" style="width:70px; " type="button" id="btnFileUpload" onclick="javascript: document.getElementById('FileUpload1').click();" value="Load CSV" />

                    @Html.ValidationMessageFor(m => m.ValueSetFilePath, null, new { @class = "required" })
                    <input id="FileUpload1" type="file" style='visibility: hidden;' name="FileUpload1" accept=".xls,.xlsx,.csv" onchange="ChangeText(this, 'ValueSetFilePath');" />


                    <span id="spnFilePath"></span>

                    <script type="text/javascript">
                        window.onload = function () {
                            var fileupload = document.getElementById("FileUpload1");

                            var filePath = document.getElementById("Path");
                            var button = document.getElementById("btnFileUpload");
                            button.onclick = function () {
                                // alert(1);
                                fileupload.click();

                            };
                            fileupload.onchange = function () {
                                //alert(2);
                                var fileName = fileupload.value.split('\\')[fileupload.value.split('\\').length - 1];

                                $('#ValueSetFilePath').val(fileName);
                                var reader = new FileReader();
                                reader.onload = function (e) {



                                    var json = csvToJSON(reader.result)

                                    $('#SaveChanges1').removeAttr('style');
                                    $('#AddRow1').removeAttr('style');
                                    $('#DeleteRow1').removeAttr('style');
                                    $('#SearchInput1').removeAttr('style');

                                    generateDynamicTable(json, "DialogBoxPrempt1", $('#EditValueSetDialogBoxPrempt').text(), true);
                                };

                                // reader.readAsBinaryString(fileupload.files[0]);
                                reader.readAsText(fileupload.files[0])
                            };
                        };
                    </script>

                </div>
                @*@if (!Model.IsAuthenticated)
                    {
                        <div>
                            <label class="accountlabel" id="SecurityTokenlabel1"><span style="color:#900000;">*</span> Security Token:</label><br>


                            @Html.TextBoxFor(m => m.ValueSetUserPublishKey, new { @class = "Account" }) <br>
                            @Html.ValidationMessageFor(m => m.ValueSetUserPublishKey, null)<br>
                        </div>
                    }*@
                <br>
                <p><input class="form-control SearchInput" id="SearchInput1" type="text" style="visibility:hidden" placeholder="Search.."></p>
                <p><input class="form-control SearchInput" id="SearchInput2" type="text" style="visibility:hidden" placeholder="Search.."></p>
                <p><label id="DialogBoxPrempt1"></label></p>

                @*<input class="btn btn-primary btn-sm" type="submit" name="UpdateValueSet" disabled="disabled" id="UpdateValueSet" onclick="" value="Update" style="margin-right:90px;" />*@


                <input class="btn btn-danger" style="visibility:hidden" type="button" name="" id="DeleteRow1" onclick="DeleteRow('DialogBoxPrempt1')" value="Delete Row" style="margin-right:20px;" />
                <input class="btn btn-primary btn-sm" style="visibility:hidden" type="button" name="" id="AddRow1" onclick="AddRow('DialogBoxPrempt1');" value="Add Row" style="margin-right:20px;" />
                <input class="btn btn-success" style="visibility:hidden" type="button" name="" id="SaveChanges1" onclick="SaveChanges('EditValueSetDialogBox','DialogBoxPrempt1')" value="Update & close" style="margin-right:20px;" />
            </div>
            <input type="hidden" id="SelectedValueSet" value="@Model.SelectedValueSet" name="SelectedValueSet" />
            <input type="hidden" id="ValueSetSurveyKey" value="@Model.ValueSetSurveyKey" name="ValueSetSurveyKey" />
            <input type="hidden" id="ReportsSurveyKey" value="@Model.ReportsSurveyKey" name="ReportsSurveyKey" />
        }
    </div>

</div>
